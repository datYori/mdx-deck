{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "scopeName": "source.rql",
    "fileTypes": [
        "rql",
        "RQL"
    ],
    "patterns": [
        {
            "include": "#expression"
        },
        {
            "include": "#comments"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "begin": "(^[ \\t]+)?(?=--)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.rql"
                        }
                    },
                    "end": "(?!\\G)",
                    "patterns": [
                        {
                            "begin": "--",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.comment.rql"
                                }
                            },
                            "end": "\\n",
                            "name": "comment.line.double-dash.rql"
                        }
                    ]
                },
                {
                    "begin": "(^[ \\t]+)?(?=#)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.rql"
                        }
                    },
                    "end": "(?!\\G)",
                    "patterns": [
                        {
                            "begin": "#",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.comment.rql"
                                }
                            },
                            "end": "\\n",
                            "name": "comment.line.number-sign.rql"
                        }
                    ]
                },
                {
                    "begin": "/\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.rql"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.c"
                },
                {
                    "begin": "\/\/",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.rql"
                        }
                    },
                    "end": "\\n",
                    "name": "comment.block.c"
                }
            ]
        },
        "expression": {
            "patterns": [
                {
                    "include": "#statement"
                },
                {
                    "include": "#types"
                },
                {
                    "include": "#constants"
                },
                {
                    "include": "#functions"
                },
                {
                    "include": "#declarations"
                },
                {
                    "include": "#paren-expression"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "char-literal"
                }
            ]
        },
        "statement": {
            "patterns": [
                {
                    "match": "(?i:\\b(select(\\s+distinct)?(\\s+)?|from|where|group\\sby|or|like|and|union(\\s+all)?|having|limit\\s+)\\b)",
                    "name": "keyword.statement"
                },
                {
                    "match": "(?i:\\b(order\\sby)\\b)(\\b\\s+([a-z,A-Z,0-9,_,\\.]+)\\b)(?i:\\b\\s+(desc)\\b)?",
                    "captures": {
                        "1": {
                            "name": "keyword.statement"
                        },
                        "2": {
                            "name": "rql.blank"
                        },
                        "3": {
                            "name": "rql.variable"
                        },
                        "4": {
                            "name": "keyword.statement"
                        }
                    }
                },
                {
                    "match": "(?i:\\b\\s?(with|iff|and|case|when|end|typealias|else|end|case|or|not|is distinct from|is not distinct from|any|between|not between||\\+\\+|\\+\\+\\+|in|not in|intersect|except)\\s+\\b)",
                    "name": "keyword.statement"
                }
            ]
        },
        "types": {
            "match": "\\b([a-z,A-Z,0-9,_,\\.]+)\\b(\\s?(:)\\s?)\\b(string|int|map((\\s+not)?(\\s+(nullable|null)))?)",
            "captures": {
                "1": {
                    "name": "rql.variable"
                },
                "2": {
                    "name": "rql.blank"
                },
                "3": {
                    "name": "rql.type.declaration"
                },
                "4": {
                    "name": "storage.type.cs"
                }
            }
        },
        "constants": {
            "match": "(?i:\\btrue|false)",
            "name": "support.constant.math"
        },
        "functions": {
            "begin": "(([a-z,A-Z,0-9,_,\\.]+)(\\[.*\\])?\\()",
            "end": "\\)",
            "beginCaptures": {
                "0": {
                    "name": "support.function.rqlFunction"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "support.function.rqlFunction"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "declarations": {
            "patterns": [
                {
                    "match": "\\b([a-z,A-Z,0-9,_,\\.]+)\\b(\\s?(:=)\\s?)",
                    "captures": {
                        "1": {
                            "name": "rql.variable"
                        },
                        "2": {
                            "name": "keyword.operator.expression"
                        }
                    }
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "end": "\"\"\"(?!\")",
                    "begin": "\"\"\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.rql"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\\\\\\\|\\\\u[0-9A-Fa-f]{4}",
                            "name": "constant.character.escape.rql"
                        }
                    ],
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.rql"
                        }
                    },
                    "name": "string.quoted.triple.rql"
                },
                {
                    "end": "\"",
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.rql"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\\\(?:[btnfr\\\\\"']|[0-7]{1,3}|u[0-9A-Fa-f]{4})",
                            "name": "constant.character.escape.rql"
                        },
                        {
                            "match": "\\\\.",
                            "name": "invalid.illegal.unrecognized-string-escape.rql"
                        }
                    ],
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.rql"
                        }
                    },
                    "name": "string.quoted.double.rql"
                },
                {
                    "end": "\\$\\$\\$",
                    "begin": "\\$\\$\\$",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.rql"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\\\(?:[btnfr\\\\\"']|[0-7]{1,3}|u[0-9A-Fa-f]{4})",
                            "name": "constant.character.escape.rql"
                        },
                        {
                            "match": "\\\\.",
                            "name": "invalid.illegal.unrecognized-string-escape.rql"
                        }
                    ],
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.rql"
                        }
                    },
                    "name": "string.quoted.double.rql"
                }
            ]
        },
        "char-literal": {
            "end": "'|$",
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.character.begin.scala"
                }
            },
            "patterns": [
                {
                    "match": "\\\\(?:[btnfr\\\\\"']|[0-7]{1,3}|u[0-9A-Fa-f]{4})",
                    "name": "constant.character.escape.scala"
                },
                {
                    "match": "\\\\.",
                    "name": "invalid.illegal.unrecognized-character-escape.scala"
                },
                {
                    "match": "[^']{2,}",
                    "name": "invalid.illegal.character-literal-too-long"
                },
                {
                    "match": "(?<!')[^']",
                    "name": "invalid.illegal.character-literal-too-long"
                }
            ],
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.character.end.scala"
                }
            },
            "name": "string.quoted.other constant.character.literal.scala"
        }
    }
}